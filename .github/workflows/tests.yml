name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install Black
        run: pip install black
      - name: Run Black check
        run: black --check src/

  ubuntu-system-python:
    name: ${{ matrix.os }}-system-python
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
      - uses: actions/checkout@v2
      - name: Install System Python
        run: |
          sudo apt install python3-dev python3-pip
      - name: Install Testing Requirements
        run: python3 -m pip install nox
      - name: Run Tests
        run: python3 -m nox -e tests

  anaconda:
    name: ${{ matrix.os }}-anaconda-${{ matrix.env }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}  # setup-miniconda requires using login bash shells to activate env
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8']
        env: [test]
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        if: matrix.env == 'base'
        with:
          # using the base env is a bit different
          # cannot specify python-version,
          # must have activate-environment: ''
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ''
      - uses: conda-incubator/setup-miniconda@v2
        if: matrix.env != 'base'
        with:
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false
          auto-update-conda: true
          activate-environment: ${{ matrix.env }}
      - name: Install Testing Requirements
        run: python -m pip install nox
      - name: Run Tests
        run: python -m nox -e tests

  rhel:
    name: rhel${{ matrix.os-version }}-system-python
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os-version: ["7", "8"]
    container: "centos:${{ matrix.os-version }}"
    steps:
      - name: Install newer Git (CentOS 7)
        if: matrix.os-version == '7'
        run: |
          yum install -y https://repo.ius.io/ius-release-el7.rpm https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum remove -y git
          yum install -y git224
      - name: Install newer Git (CentOS 8)
        if: matrix.os-version == '8'
        run: |
          dnf update -y
          dnf install -y git
      - uses: actions/checkout@v2
      - name: Install System Python
        run: yum install -y python3-devel python3-pip python3
      - name: Install Testing Requirements
        run: python3 -m pip install nox
      - name: Run Tests
        run: python3 -m nox -e tests

  msys:
    name: ${{ matrix.msystem }}-system-python
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        msystem: [MSYS, MINGW64]
    steps:
      - name: Install msys2 (MINGW64)
        if: matrix.msystem == 'MINGW64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-setuptools
            mingw-w64-x86_64-python-wheel
            mingw-w64-x86_64-python-setuptools-scm
          update: true
      - name: Install msys2 (MSYS)
        if: matrix.msystem == 'MSYS'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          install: >-
            msys2-devel
            git
            python
            python-devel
            python-pip
            python-setuptools
            python-setuptools-scm
          update: true
      - name: Install wheel package (MSYS)
        if: matrix.msystem == 'MSYS'
        run: pip install --no-build-isolation wheel
      - uses: actions/checkout@v2
      - name: Install package
        run: pip install --no-build-isolation .
      - name: Print libpython
        run: |
          echo 'NAMES'
          find_libpython -v --candidate-names
          echo 'PATHS'
          find_libpython -v --candidate-paths
          echo 'LOCATION'
          find_libpython -v
      - name: Install Testing Requirements
        run: pip install --no-build-isolation pytest pytest-cov
      - name: Run Tests
        run: |
          pytest --cov --cov-branch tests/
          pytest --cov --cov-branch --cov-append --doctest-modules $(python -c 'import find_libpython; print(find_libpython.__file__)')

  alpine:
    name: alpine-system-python
    runs-on: ubuntu-latest
    container: "alpine:latest"
    steps:
      - name: Update Packages
        run: |
          apk update
          apk upgrade
      - name: Install Python and Git
        run: |
          apk add python3 python3-dev py3-pip git
      - name: Download Source
        uses: actions/checkout@v2
      - name: Install Testing Requirements
        run: |
          pip install nox
      - name: Run Tests
        run: |
          nox -e tests

  homebrew:
    name: homebrew-system-python
    runs-on: macos-latest
    steps:
      - name: Install Python and Git
        run: |
          brew install python git
      - name: Download Source
        uses: actions/checkout@v2
      - name: Install Testing Requirements
        run: |
          python3 -m pip install nox
      - name: Run Tests
        run: |
          python3 -m nox -e tests

  archlinux:
    name: archlinux-system-python
    runs-on: ubuntu-latest
    container:
      image: archlinux
      options: --privileged
    steps:
      - name: Install Python and Git
        run: |
          pacman --noconfirm -Sy python python-pip git
      - name: Download Source
        uses: actions/checkout@v2
      - name: Install Testing Requirements
        run: |
          pip install nox
      - name: Run Tests
        run: |
          nox -e tests
